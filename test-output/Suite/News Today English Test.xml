<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="MSI" failures="0" tests="16" name=" News Today English Test" time="0.13" errors="0" timestamp="2023-11-23T11:32:58 IST">
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.05">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: E:\usr\lib\chromium-browser\chromedriver">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: E:\usr\lib\chromium-browser\chromedriver
at com.google.common.base.Preconditions.checkState(Preconditions.java:585)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:146)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:141)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:35)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:159)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:355)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:94)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:157)
at org.basepackage.VisionBaseClass.launch(VisionBaseClass.java:150)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
... Removed 16 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@BeforeMethod launch" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod launch -->
  <testcase classname="org.basepackage.VisionBaseClass" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testBannerTextOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testBannerTextOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testPresenceOfDocumentInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testPresenceOfDocumentInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testTitleOfDocumentInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testTitleOfDocumentInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testPresenceOfYearAndMediumInNewsTodayEnglishDocument" time="0.0">
    <skipped/>
  </testcase> <!-- testPresenceOfYearAndMediumInNewsTodayEnglishDocument -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testLikeCountInNewsTodayEnglishDocument" time="0.0">
    <skipped/>
  </testcase> <!-- testLikeCountInNewsTodayEnglishDocument -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testLikeCountOfDocumentAtBeforeUserLoginInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testLikeCountOfDocumentAtBeforeUserLoginInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testLikeCountBeforeUserLoginInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testLikeCountBeforeUserLoginInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testDownloadCountOfDocumentBeforeUserLoginInNewsTodayEnglish" time="0.002">
    <skipped/>
  </testcase> <!-- testDownloadCountOfDocumentBeforeUserLoginInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testUserCanShareThePageLinkViaWhatsappOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testUserCanShareThePageLinkViaWhatsappOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testUserCanShareThePageLinkViaFacebookOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testUserCanShareThePageLinkViaFacebookOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testUserCanShareThePageLinkViaGmailOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testUserCanShareThePageLinkViaGmailOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testUserCanShareThePageLinkViaTelegramOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testUserCanShareThePageLinkViaTelegramOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testFilterFunctionalityOfNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testFilterFunctionalityOfNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testClearFilterOptionInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testClearFilterOptionInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testLikeCountAfterUserLoginInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testLikeCountAfterUserLoginInNewsTodayEnglish -->
  <testcase classname="org.testpackage.TC130_NewsTodayEnglish" name="testPaginationInNewsTodayEnglish" time="0.0">
    <skipped/>
  </testcase> <!-- testPaginationInNewsTodayEnglish -->
</testsuite> <!--  News Today English Test -->
